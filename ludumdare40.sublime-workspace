{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"graphics",
				"love.graphics.circle"
			],
			[
				"fun",
				"function\tfunction"
			],
			[
				"gr",
				"love.graphics.print"
			],
			[
				"ke",
				"love.keyboard.isDown"
			],
			[
				"grap",
				"love.graphics.rectangle"
			],
			[
				"pr",
				"print\t(...)"
			],
			[
				"func",
				"function\tfunction"
			],
			[
				"funct",
				"function\tfunction"
			]
		]
	},
	"buffers":
	[
		{
			"file": "tools/collision.lua",
			"settings":
			{
				"buffer_size": 4449,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "function rect_collision(obj1, obj2)\n  if (obj1.pos.x + obj1.size.x > obj2.pos.x) and\n     (obj1.pos.x < obj2.pos.x + obj2.size.x) and\n     (obj1.pos.y + obj1.size.y > obj2.pos.y) and\n     (obj1.pos.y < obj2.pos.y + obj2.size.y) then\n  \n    return true, obj2\n  end\n  \n  return false,nil\nend\n\n\n\n-- thank you stackoverflow :P\n-- https://stackoverflow.com/questions/29861096/detect-which-side-of-a-rectangle-is-colliding-with-another-rectangle\nfunction collisionSide(r1, r2)\n  local dx=(r1.x+r1.w/2)-(r2.x+r2.w/2);\n  local dy=(r1.y+r1.h/2)-(r2.y+r2.h/2);\n  local width=(r1.w+r2.w)/2;\n  local height=(r1.h+r2.h)/2;\n  local crossWidth=width*dy;\n  local crossHeight=height*dx;\n  local collision='none';\n  \n    if(math.abs(dx)<=width and math.abs(dy)<=height) then\n        if(crossWidth>crossHeight) then\n          if crossWidth > -crossHeight then\n            collision = 'bottom'\n          else\n            collision = 'left'\n          end\n            \n        else\n          if crossWidth > -crossHeight then\n            collision = 'right'\n          else\n            collision = 'top'\n          end\n        end\n    end\n    return collision\nend\n\nfunction wallCollision(obj, dt)\n  local walls = tlm.walls\n  local result = false\n  \n  for i = 1, #walls do\n    local wall = walls[i]\n    local r2 = { x = wall.pos.x, y = wall.pos.y, w = wall.size.x, h = wall.size.y }\n    local r1 = { x = obj.pos.x, y = obj.pos.y, w = obj.size.x, h = obj.size.y }\n    local side = collisionSide(r2, r1)\n    if side ~= 'none' then\n      if side == 'right' then\n        obj.pos.x = wall.pos.x - obj.size.x - 1\n        result = true\n      elseif side == 'left' then\n        obj.pos.x = wall.pos.x + wall.size.x + 1\n        result = true\n      elseif side == 'top' then\n        obj.pos.y = wall.pos.y + wall.size.y + 1\n        result = true\n      elseif side == 'bottom' then\n        obj.pos.y = wall.pos.y - obj.size.y - 1\n        result = true\n      end\n      \n      --print(side)\n    end\n  end\n  return result\n  --isObjectOnMapBounds(obj)\nend\n\n\nfunction collectibleCollision(obj)\n  local objects = gameManager.collectibles.objects\n  \n  for i = 1, #objects do\n    if objects[i] ~= nil then\n      local result = rect_collision(obj, objects[i])\n      if result then\n        objects[i]:pickup(obj)\n      end\n    end\n  end\nend\n\n\n\nfunction collisionWithPlayerBullet(obj)\n  local objects = gameManager.playerBullets.objects\n  \n  for i = 1, #objects do\n    if objects[i] ~= nil then\n      local result = rect_collision(obj, objects[i])\n      if result then\n        obj:takeHit(objects[i].damage)\n        objects[i]:setDead()\n        gameManager:decreaseEnemy()\n      end\n    end\n  end\nend\n\n\n--[[ -- DEPRICATED \nfunction deepcopy(orig)\n    local orig_type = type(orig)\n    local copy\n    if orig_type == 'table' then\n        copy = {}\n        for orig_key, orig_value in next, orig, nil do\n            copy[deepcopy(orig_key)] = deepcopy(orig_value)\n        end\n        setmetatable(copy, deepcopy(getmetatable(orig)))\n    else -- number, string, boolean, etc\n        copy = orig\n    end\n    return copy\nend\n\n--]]",
			"file": "tools/collision2.lua",
			"file_size": 3200,
			"file_write_time": 131571503151746412,
			"settings":
			{
				"buffer_size": 3077,
				"line_ending": "Windows"
			}
		},
		{
			"file": "objects/entity.lua",
			"settings":
			{
				"buffer_size": 869,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 137.0,
		"last_filter": "Package Control: insta",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: for i=1,10"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 130.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/M/temp/love2d/ld40",
		"/M/temp/love2d/ld40/objects",
		"/M/temp/love2d/ld40/tools"
	],
	"file_history":
	[
		"/M/temp/love2d/ld40/objects/enemy.lua",
		"/M/temp/love2d/ld40/tools/collision2.lua",
		"/M/temp/love2d/ld40/objects/entity.lua",
		"/M/temp/love2d/ld40/objects/collectible.lua",
		"/M/temp/love2d/ld40/objects/player.lua",
		"/M/temp/love2d/ld40/objects/coin.lua",
		"/M/temp/love2d/ld40/tools/vec2.lua",
		"/M/temp/love2d/ld40/tools/camera.lua",
		"/M/temp/love2d/ld40/tools/gamemanager.lua",
		"/M/temp/love2d/ld40/tools/gameLoop.lua",
		"/M/temp/love2d/ld40/tools/render.lua",
		"/M/temp/love2d/ld40/run.bat",
		"/M/temp/love2d/ld40/main.lua",
		"/M/temp/love2d/ld40/tools/vec2d.lua",
		"/M/temp/love2d/tut/main.lua",
		"/M/temp/love2d/main.lua",
		"/C/Users/ki2ll/AppData/Roaming/Sublime Text 3/Packages/User/love2d_run.sublime-build"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tools/collision.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4449,
						"regions":
						{
						},
						"selection":
						[
							[
								133,
								133
							]
						],
						"settings":
						{
							"syntax": "Packages/User/SublimeLove/Love.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "tools/collision2.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3077,
						"regions":
						{
						},
						"selection":
						[
							[
								1273,
								1273
							]
						],
						"settings":
						{
							"syntax": "Packages/User/SublimeLove/Love.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "objects/entity.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 869,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/User/SublimeLove/Love.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 102.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/love2d_run.sublime-build",
	"project": "ludumdare40.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
